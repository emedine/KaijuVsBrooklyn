# This is the main configuration file for the application.
# ~~~~~

reactiveMaps.maxZoomDepth=14

reactiveMaps.maxSubscriptionRegions=6

reactiveMaps.clusterThreshold=16
reactiveMaps.clusterDimension=4

reactiveMaps.summaryInterval=5s
reactiveMaps.expiryInterval=30s
reactiveMaps.subscriberBatchInterval=2s

reactiveMaps.bots.enabled=true
reactiveMaps.bots.totalNumberOfBots=75

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="%APPLICATION_SECRET%"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

akka {

//  loglevel = INFO
//
//  actor.provider = "akka.cluster.ClusterActorRefProvider"
//
//  extensions = [
//    "akka.contrib.pattern.DistributedPubSubExtension"
//  ]
//
//  remote.netty.tcp {
//    hostname = "127.0.0.1"
//    port = 2552
//  }
//
//  cluster {
//    seed-nodes = ["akka.tcp://application@127.0.0.1:2552"]
//    roles = ["frontend", "backend-region", "backend-summary"]
//    auto-down = on
//  }

  actor.deployment {
    # Routing of position updates to the regionManager on the right
    # backend node. The node is selected by consistent hashing of
    # the region id, i.e. user position updates in a region is routed
    # to the backend node responsible for that region.
    /regionManagerClient/router {
      router = consistent-hashing-pool
      nr-of-instances = 1000
      cluster {
        enabled = on
        routees-path = "/user/regionManager"
        allow-local-routees = on
        use-role = "backend-region"
      }
    }
    # Routing of sub-region summary information to enclosing region,
    # which may be located on another backend node. The node is selected
    # by consistent hashing of the region id.
//    /regionManager/router {
//      router = consistent-hashing
//      nr-of-instances = 1000
//      cluster {
//        enabled = on
//        routees-path = "/user/regionManager"
//        allow-local-routees = on
//        use-role = "backend-summary"
//      }
//    }
  }
}
